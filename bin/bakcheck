#!/bin/bash

# Ensure CHECK_DIR is properly set
CHECK_DIR=$(pwd)

# Safety check to prevent scanning system files
if [[ -z "$CHECK_DIR" || "$CHECK_DIR" == "/" ]]; then
    echo "Error: Source directory is not set or is root (/), aborting!"
    exit 1
fi

echo "Checking: $CHECK_DIR"

# Read backup destination from .bak/.bakconfig
if [ -f "$CHECK_DIR/.bak/.bakconfig" ]; then
    source "$CHECK_DIR/.bak/.bakconfig"
    EXPECTED_DEVICE=$(findmnt -rno TARGET -S LABEL="$DEVICE_LABEL" | sed 's/\\x20/ /g')
    if [ -z "$EXPECTED_DEVICE" ] || [[ "$EXPECTED_DEVICE" != "$MOUNT_POINT"* ]]; then
        echo "Error: The expected backup device ($DEVICE_LABEL) is not mounted."
        echo "please mount and try again."
        exit 1
    fi
else
    echo "No configuration file found!"
    echo "Run: bak init"
    exit 1
fi

# Check if backup destination exists
if [ ! -d "$BACKUP_DEST" ]; then
    echo "Backup destination path does not exist!"
    echo "Run: bak config set mount </path/to/mount>"
    exit 1
fi

# Ensure .bakignore exists before using it
EXCLUDE_OPTION=""
if [ -f "$CHECK_DIR/.bakignore" ]; then
    EXCLUDE_OPTION="--exclude-from=$CHECK_DIR/.bakignore"
fi

# Show differences between local and backup with structured output
echo -e "\nSource: \"$(basename "$CHECK_DIR")\" â†” Destination: \"$(basename "$BACKUP_DEST")\"\n"

rsync -rcn --delete --itemize-changes $EXCLUDE_OPTION "$CHECK_DIR/" "$BACKUP_DEST/" | awk '
    /^deleting / {print "\033[31m[DELETED] " substr($0,10) "\033[0m"; next}  
    /^[cd]/ {print "\033[33m[NEW DIRECTORY] " substr($0,3) "\033[0m"; next}    
    /^>/ {print "\033[32m[UPDATED FILE] " substr($0,3) "\033[0m"; next}       
    /^\+/ {print "\033[36m[NEW FILE] " substr($0,3) "\033[0m"; next}           
    /^\*/ {print "\033[34m[FILE PERMISSION CHANGED] " substr($0,3) "\033[0m"; next}  
'

echo -e "\nAbove are the detected differences."
