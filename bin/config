#!/bin/bash

# Get the current directory (source) and backup destination directory
INIT_DIR=$(pwd)
BAK_DIR="$INIT_DIR/.bak"
CONFIG_FILE="$BAK_DIR/.bakconfig"

# Help function for config
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: bak config <command> [arguments]"
    echo
    echo "Configuration Commands:"
    echo "  bak config set mount <path>     - Set the mount point (e.g., /media/backup)"
    echo "  bak config set device <label>   - Set the device label (e.g., MyBackupDriveName)"
    echo "  bak config create backup        - Automatically create backup destination"
    echo "  bak config list                 - List the current backup user"
    echo "  bak config remove               - Remove the backup user"
    echo "  bak config user <username>      - Set a new backup user"
    echo "  bak config show                 - Show the current configuration"
    exit 0
fi

# Ensure a .bakconfig file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "No configuration file found in the current directory."
    echo "Run bak init."
    exit 1
fi

# Load the current backup destination
source "$CONFIG_FILE"

if [ -z "$BACKUP_DEST" ]; then
    echo "A backup destination is not set."
    echo "Run bak config set mount </path/to/mount>."
    exit 1
fi

DEST_CONFIG_FILE="$BACKUP_DEST/.bak/.bakconfig"

# Function to remove BACKUP_USER
remove_backup_user() {
    sed -i '/^BACKUP_USER=/d' "$CONFIG_FILE" && echo "Backup user removed from $CONFIG_FILE"
    
    if [ -f "$DEST_CONFIG_FILE" ]; then
        sed -i '/^BACKUP_USER=/d' "$DEST_CONFIG_FILE"
        echo "Backup user removed from $DEST_CONFIG_FILE"
        rsync -av "$CONFIG_FILE" "$DEST_CONFIG_FILE"
    fi

    if [ -f ~/.backupuser ]; then
        rm -f ~/.backupuser && echo "Backup user removed from global config."
    fi
}

# Function to list backup user
list_backup_user() {
    [[ -f "$CONFIG_FILE" ]] && echo "Local backup user: $(grep BACKUP_USER "$CONFIG_FILE" | cut -d '=' -f2 || echo "None")"
    [[ -f "$DEST_CONFIG_FILE" ]] && echo "Destination backup user: $(grep BACKUP_USER "$DEST_CONFIG_FILE" | cut -d '=' -f2 || echo "None")"
    [[ -f ~/.backupuser ]] && echo "Global backup user: $(grep BACKUP_USER ~/.backupuser | cut -d '=' -f2 || echo "None")"
}

# Function to update backup user
update_backup_user() {
    if [[ "$1" != "user" ]]; then
        echo "Usage: bak config user <username>"
        exit 1
    fi

    if [[ -z "$2" ]]; then
        echo "Error: Missing username."
        echo "Usage: bak config user <username>"
        exit 1
    fi

    local USERNAME="$2"
    sed -i '/^BACKUP_USER=/d' "$CONFIG_FILE"
    echo "BACKUP_USER=$USERNAME" >> "$CONFIG_FILE"
    echo "User set in $CONFIG_FILE"

    echo "BACKUP_USER=$USERNAME" > ~/.backupuser
    echo "Backup user set globally to $USERNAME"

    if [ -f "$DEST_CONFIG_FILE" ]; then
        sed -i '/^BACKUP_USER=/d' "$DEST_CONFIG_FILE"
        echo "BACKUP_USER=$USERNAME" >> "$DEST_CONFIG_FILE"
        echo "User set in $DEST_CONFIG_FILE"
        rsync -av "$CONFIG_FILE" "$DEST_CONFIG_FILE"
    else
        echo "Backup destination is not set."
        echo "Skipping this part for later."
    fi
}

# Function to check if mount point is valid and device is mounted
check_mount_point() {
    if [ ! -d "$MOUNT_POINT" ]; then
        echo "Error: Mount point $MOUNT_POINT does not exist."
        exit 1
    fi

    if ! mount | grep -q "$MOUNT_POINT"; then
        echo "Error: No device is mounted at $MOUNT_POINT."
        exit 1
    fi
}

# Command Handling
case "$1" in
    remove)
        remove_backup_user
        ;;
    list)
        list_backup_user
        ;;
    show)
        [[ -f "$CONFIG_FILE" ]] && cat "$CONFIG_FILE" || echo "No configuration found."
        ;;
    set)
        if [[ -z "$2" || -z "$3" ]]; then
            echo "run bak config -h"
            echo "run bak config --help"
            exit 1
        fi
        case "$2" in
            device)
                # Ensure mount point is set before setting device label
                if [ -z "$MOUNT_POINT" ]; then
                    echo "Mount point is not set."
                    echo "Run: bak config set mount </path/to/mount>"
                    exit 1
                fi
                check_mount_point
                # Check if the device name is actually a mounted device
                DEVICE_NAME="$3"
                if ! mount | grep -q "$DEVICE_NAME"; then
                    echo "There is no device with the name '$DEVICE_NAME' mounted."
                    echo "Check the name of your device and try again"
                    echo "Try opening the device to mount it"
                    exit 1
                fi
                # If the device name is valid, update the device label
                sed -i "s|^DEVICE_LABEL=.*|DEVICE_LABEL=\"$DEVICE_NAME\"|" "$CONFIG_FILE"
                echo "Device detected successfully"
                echo "Device label set to $DEVICE_NAME"
                ;;
            mount)
                sed -i "s|^MOUNT_POINT=.*|MOUNT_POINT=\"$3\"|" "$CONFIG_FILE"
                echo "Updated mount point to $3"
                ;;
            *)
                echo "run bak config -h"
                echo "run bak config --help"
                exit 1
                ;;
        esac
        echo "Updated $2 to $3"
        ;;
    create)
        if [[ -z "$2" ]]; then
            echo "Error: Missing argument for 'create' command."
            echo "Usage: bak config create backup"
            exit 1
        elif [[ "$2" != "backup" ]]; then
            echo "Invalid create command. Try: bak config create backup"
            exit 1
        else
            # Logic for creating backup
            if [ -z "$MOUNT_POINT" ]; then
                echo "Mount point is not set."
                echo "Run: bak config set mount <path>"
                exit 1
            fi
            if [ -z "$DEVICE_LABEL" ]; then
                echo "Device label is not set."
                echo "Run: bak config set device <label>"
                exit 1
            fi
            if [ -z "$BACKUP_USER" ]; then
                echo "Backup user is not set."
                echo "Run: bak config user <username>"
                exit 1
            fi
            EXPECTED_DEVICE=$(findmnt -rno TARGET -S LABEL="$DEVICE_LABEL" | sed 's/\\x20/ /g')
            if [ -z "$EXPECTED_DEVICE" ] || [[ "$EXPECTED_DEVICE" != "$MOUNT_POINT"* ]]; then
                echo "Error: The expected backup device ($DEVICE_LABEL) is not mounted at $MOUNT_POINT."
                exit 1
            fi
            BACKUP_PATH="$MOUNT_POINT/$DEVICE_LABEL/$(basename "$INIT_DIR")"
            mkdir -p "$BACKUP_PATH"
            sed -i "s|^BACKUP_DEST=.*|BACKUP_DEST=\"$BACKUP_PATH\"|" "$CONFIG_FILE"
            rsync -av "$BAK_DIR/" "$BACKUP_PATH/.bak/" &>/dev/null
            echo "creating backup ..."
            rsync -av "$INIT_DIR/.bakignore" "$BACKUP_PATH/.bakignore" &>/dev/null
            echo "creating configuration files ..."
            rsync -av "$CONFIG_FILE" "$DEST_CONFIG_FILE" &>/dev/null
            echo "Backup structure initialized"
        fi
        ;;
    user)
        update_backup_user "$@"
        ;;
    *)
        echo "Invalid command. Use: bak config <command> [arguments]"
        exit 1
        ;;
esac

exit 0
