#!/bin/bash

# Get the absolute path of the script's directory
SCRIPT_DIR=$(dirname "$(realpath "$0")")

# Get the parent directory
PARENT_DIR=$(dirname "$SCRIPT_DIR")

# Default version (if no file exists)
DEFAULT_VERSION="unknown"

# Try to read the version from package.json in the parent directory
if [[ -f "$PARENT_DIR/package.json" ]]; then
    VERSION=$(grep '"version":' "$PARENT_DIR/package.json" | awk -F '"' '{print $4}')
else
    VERSION=$DEFAULT_VERSION
fi

# Version command for bak
if [[ "$1" == "-v" || "$1" == "--V" || "$1" == "--version" ]]; then
    echo "bak v$VERSION"
    exit 0
fi

# Help function for bak
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: bak {push|pull|check|config}"
    echo
    echo "Commands:"
    echo "  track           - Pushes data to the backup location"
    echo "  restore         - Retrieves data from the backup location that are not in the source"
    echo "  restore -lost   - Retrieves data once source files are all lost"
    echo "  check           - Checks the backup status"
    echo "  config          - Manage backup configurations (run 'bak config -h' for more info)"
    exit 0
fi

case "$1" in
  track)
    "$SCRIPT_DIR/bakpush"
    ;;
  restore)
    if [[ "$2" == "-lost" ]]; then
        shift
        "$SCRIPT_DIR/bakrestore" "$@"
    else
        "$SCRIPT_DIR/bakpull"
    fi
    ;;
  check)
    "$SCRIPT_DIR/bakcheck"
    ;;
  config)
    shift
    "$SCRIPT_DIR/config" "$@" 
    ;;
  init)
    shift
    "$SCRIPT_DIR/bakinit" "$@"
    ;;
  *)
    echo "Usage: bak {-h|--help}"
    exit 1
    ;;
esac
